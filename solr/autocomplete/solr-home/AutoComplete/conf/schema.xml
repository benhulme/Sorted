<?xml version="1.0" encoding="UTF-8"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!-- This is a sample schema for AutoComplete / AutoSuggest as a Solr core.
     By Cominvent AS, see www.cominvent.com -->

<schema name="AutoComplete" version="1.4">
	<types>
		<fieldType name="text" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
        <!-- Case insensitive stop word removal.
          add enablePositionIncrements=true in both the index and query
          analyzers to leave a 'gap' for more accurate phrase queries.
        -->
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>
		<!-- text_suggest : Matches whole terms in the suggest text  -->
		<fieldType name="text_suggest" class="solr.TextField" positionIncrementGap="100">
			<analyzer type="index">
				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.WordDelimiterFilterFactory" 
					    generateWordParts="1" 
					    generateNumberParts="1"
					    catenateWords="1"
					    catenateNumbers="1"
					    catenateAll="1"
					    splitOnCaseChange="1"
					    splitOnNumerics="1"
					    preserveOriginal="1"
				/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement=" " replace="all"/>
			</analyzer>
			<analyzer type="query">
				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.WordDelimiterFilterFactory" 
					    generateWordParts="0" 
					    generateNumberParts="0"
					    catenateWords="0"
					    catenateNumbers="0"
					    catenateAll="0"
					    splitOnCaseChange="0"
					    splitOnNumerics="0"
				/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement=" " replace="all"/>
			</analyzer>
		</fieldType>
		<!-- text_phonetic_do : Matches a phonetic version of the suggest text, for a fuzzy effect 
		     Note that there are other phonetic algorithms as well, but this works pretty well
		-->
		<fieldType name="text_phonetic_do" class="solr.TextField" positionIncrementGap="100">
			<analyzer>
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
			</analyzer>
		</fieldType>
		<!-- autocomplete_edge : Will match from the left of the field, e.g. if the document field
		     is "A brown fox" and the query is "A bro", it will match, but not "brown"
		-->
		<fieldType name="autocomplete_edge" class="solr.TextField">
			<analyzer type="index">
				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
				<tokenizer class="solr.KeywordTokenizerFactory"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.PatternReplaceFilterFactory" pattern="([\.,;:-_])" replacement=" " replace="all"/>
				<filter class="solr.EdgeNGramFilterFactory" maxGramSize="30" minGramSize="1"/>
				<filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement="" replace="all"/>
			</analyzer>
			<analyzer type="query">
				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
				<tokenizer class="solr.KeywordTokenizerFactory"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.PatternReplaceFilterFactory" pattern="([\.,;:-_])" replacement=" " replace="all"/>
				<filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement="" replace="all"/>
				<filter class="solr.PatternReplaceFilterFactory" pattern="^(.{30})(.*)?" replacement="$1" replace="all"/>
			</analyzer>
		</fieldType>
		
		<!-- autocomplete_ngram : Matches any word in the input field, with implicit right truncation.
		     This means that the field "A brown fox" will be matched by query "bro".
		     We use this to get partial matches, but these whould be boosted lower than exact and left-anchored
		-->
		<fieldType name="autocomplete_ngram" class="solr.TextField">
			<analyzer type="index">
				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.EdgeNGramFilterFactory" maxGramSize="20" minGramSize="1"/>
				<filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement="" replace="all"/>
			</analyzer>
			<analyzer type="query">
				<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
				<tokenizer class="solr.StandardTokenizerFactory"/>
				<filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="0"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement="" replace="all"/>
				<filter class="solr.PatternReplaceFilterFactory" pattern="^(.{20})(.*)?" replacement="$1" replace="all"/>
			</analyzer>
		</fieldType>
		<!-- Define all the basic field types for consistency -->
		<fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>
		<fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>
		<fieldtype name="binary" class="solr.BinaryField"/>
		<fieldType name="int" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
		<fieldType name="float" class="solr.TrieFloatField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
		<fieldType name="long" class="solr.TrieLongField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
		<fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
		<fieldType name="tint" class="solr.TrieIntField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
		<fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
		<fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
		<fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
		<fieldType name="date" class="solr.TrieDateField" omitNorms="true" precisionStep="0" positionIncrementGap="0"/>
		<fieldType name="tdate" class="solr.TrieDateField" omitNorms="true" precisionStep="6" positionIncrementGap="0"/>
	</types>
	<fields>
		<!-- AutoComplete fields
		     Construct documents containing these fields for all suggestions you like to provide
		     Then use a dismax query to search on some fields, display some fields and boost others
		 -->
		<field name='_documentid' type='string' indexed='true' stored='true' required='true' />
		<field name='ID' type='tint' indexed='true' stored='true' required='true' />
		<field name='ClassName' type='string' indexed='true' stored='true' required='true' />
		<field name='ClassHierarchy' type='string' indexed='true' stored='true' required='true' multiValued='true' />
		<field name='SiteTree_ID' type='text' indexed='true' stored='true' multiValued=''/>
		<field name='SiteTree_Title' type='text' indexed='true' stored='true' multiValued=''/>
		<field name='SiteTree_Content' type='text' indexed='true' stored='true' multiValued=''/>
		<field name='SortedPage_ShortCopy' type='text' indexed='true' stored='true' multiValued=''/>
		<field name='SortedBlogPost_ShortCopy' type='text' indexed='true' stored='true' multiValued=''/>
		<field name='_versionedstage' type='string' indexed='true' stored='true' multiValued=''/>
		<field name="textphon" type="text_phonetic_do" indexed="true" stored="false" omitNorms="true" omitTermFreqAndPositions="true" />
		<field name="_version_" type="long" indexed="true" stored="true" multiValued="false"/>
		<field name="textng" type="autocomplete_ngram" indexed="true" stored="false" omitNorms="true" omitTermFreqAndPositions="true" multiValued='true'/>


		<field name="textnge" type="autocomplete_edge" indexed="true" stored="false" multiValued='true' />
		<!-- A phonetic variant if textsuggest -->

		<copyField source="SiteTree_Title" dest="textphon"/>
		<copyField source="SiteTree_Title" dest="textnge"/>
		<copyField source="SiteTree_Title" dest="textng"/>
		<copyField source='SiteTree_Content' dest='textnge' />
		<copyField source='SortedPage_ShortCopy' dest='textnge' />
		<copyField source='SortedBlogPost_ShortCopy' dest='textnge' />
	</fields>
	<uniqueKey>_documentid</uniqueKey>
	<defaultSearchField>textng</defaultSearchField>
	<solrQueryParser defaultOperator="AND"/>
</schema>

	